[Chapter - 12]

----------------------------------------------------------------------------------------------------------------------------------------------------
1. Constructor and temporary objects

Stock stock1("NanoSmart", 12, 20.0);			// Explicit Constructor Called; No temporary object here.

Stock stock2 = Stock("Boffo Objects", 2, 2.0);      	// Explicit Constructor Called; No temporary object here.

stock2 = stock1;                                    	// Assignment, not initialization. NO Constructor Called here, because stock2 already exists.

stock1 = Stock("Nifty Foods", 10, 50.0);                // Explicit Constructor Called by temporary object, then assign to existing object. 
							// Then Destructor Called for temporary object.

StringBad OBJ4 = OBJ3;					// Only Copy constructor called. No assignment here.

StringBad OBJ5;             // Default constructor.
OBJ5 = OBJ1;                // Only Default/Overloaded Assignment Here. OBJ5 and OBJ1 point to the same string.

Copy constructor is used when:
(1) Initialize a new object using an existing one;
(2) Passing function argument by value, or return by value;
(3) Invoking an temporary object;
(4) You class has static data member which changes with new object created;

Default copy constructor in above cases uses default '=' operator to do member-to-member shallow copying.

----------------------------------------------------------------------------------------------------------------------------------------------------
2. Default constructor

A default constructor is one with no arguments. So you can initialize a class object like:

Stock stock1; // Using default constructor

Default constructor usually has the form as:

Stock();

However, a constructor with arguments still can be default constructor if ALL its arguments have default values:

Stock(const string & co = "Error", int n = 0, double pr = 0.0);

The most important, you can only have one copy of default constructor, not both. So you don't do below at the sam time!
----------------------------------------------------------------
Stock();
Stock(const string & co = "Error", int n = 0, double pr = 0.0);
----------------------------------------------------------------

[Note]
When you have member of data or data pointer that need new operation to initialize, you need to have this new in a simplest
form as an initialization, to be comptible with destructor. You destructor will have delete there, so, if you don't do new 
in default constructor, objects initialized with default constructor will have problem.

Form 'delete []p' works with pointe from 'new []' form, or null pointer. So in this default constructor, it can be:
(1) p = new char[1]; 	// Don't use p = new char; it must be with [].
    p[0] = '\0';

(2) p = 0;
(3) p = (void *)0;
(4) p = nullptr;     	// 3 forms of null pointer. (4) for C++11.

----------------------------------------------------------------------------------------------------------------------------------------------------
3. Copy constructor

It is used in below situation:

(1) Initialize a new object using existing one.
    An example is: StringBad OBJ4 = OBJ3;

(2) Pass function argument by value, or function return by value. Here involves temporary object, which is 
    generated by calling copy constructor. 

(3) Invoking temporary object;

(4) You class has static data member which changes with new object created, you should provide a explicit
    copy constructor to handle this change. Because default copy constructor will ignore static member.
    
    An example is the auto increment of 'static int numSB';

----------------------------------------------------------------------------------------------------------------------------------------------------
4. Default member fuctions
C++ will define below 5 kinds of default member functions for a class if you don't define it.
(1) Default constructor;
(2) Copy constructor that do shallow copy;
(3) Default destructor;
(4) Default assignment that do shallow copy;
(5) Default address operator;

----------------------------------------------------------------------------------------------------------------------------------------------------
5. When overloading assignment = for assigning an object to another object, it is very important to avoid assignment to object itself. See paper version note for reason.

----------------------------------------------------------------------------------------------------------------------------------------------------
6. Static 

Memeber function:
(1) Doesn't need an object to invoke it. It can be used as classname::functionname();
(2) Doesn't have 'this' pointer;
(3) This kind of functions are usually in 'public' section;
(4) The only data members it can access are the static data member;

Data member:
(1) Form 'static int num' can't do initialization in class declaration; you need to have initialization of
    'int classname::num = 0' form in corresponding .cpp file;
 
    The reason is declaration describes what the class lokks like, should not allocate any memory.

(2) Form 'static const int num = 0' can do this initialization in class declaration;

(3) enum {Month = 12}; can do this kind of initialization since Month here is just a symbolic name. It will be replaced by 12 at compiling time;

----------------------------------------------------------------------------------------------------------------------------------------------------
