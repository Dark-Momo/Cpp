1.  Asynchoronous Programming
    Asynchoronous programming means several tasks runs at the same time, and one doesn't need another to finish.
    
    An example is, a task needs to get some data from backend. After issuing the request, it can wait for the
    data to come and then execute the next step (Synchoronous), or it can immediately work on its next step, and 
    when it gets to the function that really works on the data, it checks whether the data is ready (Asynchoronous).

    Asynchoronous programming can reduce blocking. Blocking can come from waiting for critical region, or join.
    
    Mutex/atomic operation is synchoronization between blockings.
    There is also non-blocking synchoronization. Threads communicates using concurrent queues. C++ itself doesn't
    have this kind of queue, while Boost, MicroSoft and Intel provides.

    Both std::packaged_task and std::async() is higher abstraction than that of std::thread.

2.  Create a task - std::packaged_task
    The task here means an encapsulated execution sequences, or a function unit that deals with a special request.
    When we are talking about "asynchoronous" here, we mean Asynchoronous between Tasks.

    std::packaged_task, define in <future>, encapsulates a task.
    (1) A callable object for the task's code;
    (2) A std::promise stores the task result;
    It actually provides abstraction.

    std::packaged_task is a template class (actually functor class), with the callable object as its parameter.
    
    (1) // Callable object below is a function that take 2 int as input, and int as return.
        std::packaged_task<int(int, int)> pTask(...);
    
    (2) It has a get_future() member, associated with its std::promise().
        The advantage of std::packaged_task is that you don't need to create std::promise yourself.
    (3) It is move-only, can't be copied;
    (4) Task starts when operator() is called;
        - In the same thread, call it directly. Under this case, the current calling thread will stop and wait for the
          new task to finish. It is like calling a function, it is Synchoronous;
        - In a new thread, passing the task to std::thread's constructor. Under this case, the calling thread and the
          new thread will run concurrently;
    
3.  Create a task - std::async()
    Defined in <future>, it is a function, not a class like std::packaged_task.
    std::async() returns a std::future object, which contains the task return. Then we can use get() to extract
    the return value.
    
    If the task throws exception, it will also get through by the return value of std::future.

    std::async() may start the task in current thread, or a new thread, controlled by launch flag.
    (1) std::launch::async will start a new thread, and run the task immediately;
    (2) std::launch::deferred : nothing will happen until we call get() for its return value. Lazy Evaluation.
    These 3 options are bit-wise, so they can be set together using OR. And this is the dfault setting for async().
    Implemantation will decide whether to have a new thread or not.

    Here, the video [Video - 65] explains when to use std::launch::async and std::launch::deferred.
    It also explains wait(), wait_for(), and wait_until().

4. Choose a thread object
    Now, we have 3 methods to create a thread object:
    (1) std::thread();
    (2) std::packaged_task();
    (3) std::async();

  [std::async()] 
  - Simplest way to create a task
  - Easy to get return value and exception;
  - Can choose to Asynchoronously in a different thread, or Synchoronously in current thread;
  It is high level abstraction than std::thread.
  - Library manages the thread like start, join, and communication;
  - No need to use shared data, so no need to use lock and atomic type;

  Disadvantages:
  (1) Can't detach;
  (2) If with std::launch::async option and use std::future to get its return value, the task is implicitly joined.
      That is because the destructor of std::future need to wait for the task to finish.
      --------------------------------------------------------------------------------------
      [Video - 66]
      {
        std::future fut = std::async(std::launch::async, func);
      }
      // Dtor of fut will block until task finishes, making the program like Synchoronously.
      --------------------------------------------------------------------------------------
   
  [std::packaged_task]
  - Best choice if you want to represent the task as an object, like creating a container of tasks;
  - More control than std::async();

  [std::thread]
  - Most flexible, such as setting priority and pinning to a specific core;
  - Can be detached;

  Recommendation:
  - Start a new task in general, use async();
  - Thread container, use std::packaged_task;
  - For detach, and more specific features, use std::thread;




