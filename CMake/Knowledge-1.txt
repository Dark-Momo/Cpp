1.  If you run command 'cmake', you get:
    -------------------------------------------------------
    momo@Ubuntu-Linux-22-04:~/Cpp/CMake$ cmake
    Usage

    cmake [options] <path-to-source>
    cmake [options] <path-to-existing-build>
    cmake [options] -S <path-to-source> -B <path-to-build>
    -------------------------------------------------------

2.  We need to edit the CMakeLists.txt file to contain source file information. And it is the line:
    ----------------------------------------------
    add_executable(${PROJECT_NAME} HelloWorld.cpp)
    ----------------------------------------------
    that enables Makefile contain our cource .cpp information.

3.  Install
    # install will enable "make install" at make stage after cmake command.
    # It will copy generated executable file into /usr/local/bin so that you can run the command anywhere.
    install(TARGETS ${PROJECT_NAME} DESTINATION bin)

**********************************************************************************************************************
There are 2 ways of compiling here:
- If 'build' dir is created parallel to your project folder
  (1) cmake -S ./YouProjectFolder -B ./build/YouBuildFolder
  (2) cd build
  (3) make
  (4) ./YouExecutableFile
  (5) make install if necessary after (3)

- If 'build' dir is created inside your project folder
  (1) cd YouProjectFolder/build
  (2) cmake ..          (.. tells Cmake that CMakeLists.txt is in .. folder, and put built file just here)
  (3) cmake --build .   (--build . tells Cmake build exe using Makefile in . folder)
  (4) ./YouExecutableFile

These 2 methods differs on how to generate the executable file. One uses make command, the other uses --build option.
**********************************************************************************************************************

4. Generator
CMake is a generator for the files that really work to compile something.
How does CMake know it is expected to generate makefile for our Linux example?
"cmake --help" will list out what kind of compilation file the current system supports. In my system, it has a line
like '* Unix Makefiles', which means Unix Makefiles is default. Or you can specify by command line as:
--------------------------------------------------------------------------
cmake [options] -S <path-to-source> -B <path-to-build> -G "Unix Makefiles"
--------------------------------------------------------------------------

5. If you want to generate a library, it is almost the same for the CMakeLists.txt file, only to use
-------------
add_library()
-------------

Project 2-SimpleLibrary and 2-TestSimpleLibrary show how to install library and its header file so that calling 
applications can call the library without need to consider its path.

Both add_executable() and add_library() are in the form of:
---------------------------------------------------------
add_executable/library(TARGER_NAME SOURCE_FILE_NAME)
---------------------------------------------------------
One single Cmake file can contain both, which means it can build both library and executable file. It is usually 
that we make function .cpp files as library, then build the executable file with libraries linked. 

However, you can use below command at make stage to assign which target you want:
---------------------------------------------------------
cmake --build . --target TARGER_NAME
---------------------------------------------------------

