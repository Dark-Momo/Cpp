CMake Project Structure with library

1. Simplest
This structure will have all of its source files, including calling file, library files, and headers in the same directory.
---------------------------------------------------------------
project(ProjectName)
add_library(LibraryName STATIC/SHARED FILENAME)
add_executable(ExecutableName FILENAME)
target_link_libraries(ExecutableName PUBLIC/PRIVATE LibraryName)
---------------------------------------------------------------

2. Calling file and library files are in separate folders, and in there common parent folder, there is no Cmake file.
The demo 2-SimpleLibrary and 2-TestSimpleLibrary is the example.

(1) In library file folder, the CMakeLists.txt is:
---------------------------------------------------------------
project(LibraryProjectName)
add_library(LibraryName STATIC/SHARED FILENAME)
---------------------------------------------------------------

(2) In calling design folder, CMakeLists.txt is:
---------------------------------------------------------------
Project(ExeProjectName)
add_executable(ExecutableName FILENAME)
target_link_directories(ExecutableName PUBLIC ${LIBRARY_PATH})
target_link_libraries(ExecutableName PUBLIC/PRIVATE LibraryName)

Here, when the calling main.cpp includes the library header, it should use the full path of that header file
since we didn't denote the header path to CMake.

In CMake, if a file want to include a header cross-folder, you need to:
- Tell CMake where to look for include files explicitly;
- Include the full path of the header in calling .cpp file;
---------------------------------------------------------------

